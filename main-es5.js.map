{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/models/process-item.ts","webpack:///src/app/models/process-scheduling-item.ts","webpack:///src/app/models/process-time-block.ts","webpack:///src/app/process-chart/process-chart.component.ts","webpack:///src/app/process-chart/process-chart.component.html","webpack:///src/app/process-input/process-input.component.ts","webpack:///src/app/process-input/process-input.component.html","webpack:///src/app/process-scheduling-result/process-scheduling-result.component.ts","webpack:///src/app/process-scheduling-result/process-scheduling-result.component.html","webpack:///src/app/process-time-block/process-time-block.component.ts","webpack:///src/app/process-time-block/process-time-block.component.html","webpack:///src/app/services/process-calculation-service.ts","webpack:///src/app/services/process-scheduling-provider-service.ts","webpack:///src/app/services/time-block-provider-service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","providers","AppModule","declarations","bootstrap","ProcessItem","ProcessSchedulingItem","Name","WaitingTime","ResponseTime","TurnaroundTime","ProcessTimeBlock","StartTime","EndTime","Duration","IsFirstBlock","ProcessChartComponent","timeBlockProviderService","subscriptions","processTimeBlocks","forEach","sub","unsubscribe","subscription","timeBlocksCalculated","subscribe","timeBlocks","push","ProcessInputComponent","processCalculationService","processSchedulingProviderService","algorithms","processItems","isPriorityUsed","processItem","generateNextName","index","indexOf","splice","item","i","toString","length","internalSelectedAlgorithm","calculateByFCFS","calculateBySJF","calculateBySRTF","calculateByPS","emit","schedulingItems","calculateSchedulingResult","value","x","Priority","onAddProcessItem","onClickStart","ProcessSchedulingResultComponent","processSchedulingItems","processSchedulingItemsCalculated","ProcessTimeBlockComponent","ProcessCalculationService","processes","copiedProcesses","sort","ArrivalTime","startTime","endTime","process","BurstTime","availableProcesses","filterAvailableProcesses","minBurstTime","map","find","removeProcessItemFromCollection","currentProcess","minRemainingTime","minRemainingTimeProcess","highestPriority","waitingTime","calculateWaitingTime","responseTime","calculateResponseTime","turnaroundTime","calculateTurnaroundTime","schedulingItem","timeBlock","collection","ProcessSchedulingProviderService","processSchedulingItemsSource","asObservable","next","TimeBlockProviderService","timeBlocksSource","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { TimeBlockProviderService } from './services/time-block-provider-service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [TimeBlockProviderService]\n})\nexport class AppComponent {\n  title = 'process-scheduling';\n}\n","<div class=\"container\">\n  <app-process-input></app-process-input>\n  <app-process-chart></app-process-chart>\n  <app-process-scheduling-result></app-process-scheduling-result>\n  <router-outlet></router-outlet>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ProcessChartComponent } from './process-chart/process-chart.component';\nimport { ProcessInputComponent } from './process-input/process-input.component';\nimport { ProcessTimeBlockComponent } from './process-time-block/process-time-block.component';\nimport { ProcessCalculationService } from './services/process-calculation-service';\nimport { TimeBlockProviderService } from './services/time-block-provider-service';\nimport { ProcessSchedulingResultComponent } from './process-scheduling-result/process-scheduling-result.component';\nimport { ProcessSchedulingProviderService } from './services/process-scheduling-provider-service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ProcessChartComponent,\n    ProcessInputComponent,\n    ProcessTimeBlockComponent,\n    ProcessSchedulingResultComponent\n  ],\n  imports: [\n    FormsModule,\n    BrowserModule,\n    AppRoutingModule\n  ],\n  providers: [\n    ProcessCalculationService,\n    TimeBlockProviderService,\n    ProcessSchedulingProviderService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export class ProcessItem {\r\n    public Name: string;\r\n    public ArrivalTime: number;\r\n    public BurstTime: number;\r\n    public Priority: number;\r\n}","export class ProcessSchedulingItem {\r\n    constructor(\r\n        public Name: string,\r\n        public WaitingTime: number,\r\n        public ResponseTime: number,\r\n        public TurnaroundTime: number) { }\r\n}","export class ProcessTimeBlock {\r\n    constructor(\r\n        public Name: string,\r\n        public StartTime: number,\r\n        public EndTime: number) {}\r\n\r\n    public Duration: number = this.EndTime - this.StartTime;\r\n    public IsFirstBlock: boolean = this.StartTime === 0;\r\n}","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { TimeBlockProviderService } from '../services/time-block-provider-service';\nimport { ProcessTimeBlock } from '../models/process-time-block';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-process-chart',\n  templateUrl: './process-chart.component.html',\n  styleUrls: ['./process-chart.component.css']\n})\nexport class ProcessChartComponent implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n  public processTimeBlocks: ProcessTimeBlock[] = [];\n\n  constructor(private timeBlockProviderService: TimeBlockProviderService) { }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  ngOnInit(): void {\n    const subscription = this.timeBlockProviderService.timeBlocksCalculated\n      .subscribe(timeBlocks => {\n        this.processTimeBlocks = timeBlocks;\n      });\n    this.subscriptions.push(subscription);\n  }\n\n}\n","<app-process-time-block *ngFor=\"let processTimeBlock of processTimeBlocks\" [processTimeBlock]=\"processTimeBlock\">\n</app-process-time-block>","import { Component, OnInit } from '@angular/core';\nimport { ProcessItem } from '../models/process-item';\nimport { ProcessCalculationService } from '../services/process-calculation-service';\nimport { TimeBlockProviderService } from '../services/time-block-provider-service';\nimport { ProcessTimeBlock } from '../models/process-time-block';\nimport { ProcessSchedulingProviderService } from '../services/process-scheduling-provider-service';\n\n@Component({\n  selector: 'app-process-input',\n  templateUrl: './process-input.component.html',\n  styleUrls: ['./process-input.component.css']\n})\nexport class ProcessInputComponent implements OnInit {\n  private internalSelectedAlgorithm: string;\n  public get selectedAlgorithm(): string {\n    return this.internalSelectedAlgorithm;\n  }\n  public set selectedAlgorithm(value: string) {\n    if (value === 'PS') {\n      this.isPriorityUsed = true;\n    } else {\n      this.isPriorityUsed = false;\n      this.processItems.forEach(x => {\n        x.Priority = null;\n      });\n    }\n    this.internalSelectedAlgorithm = value;\n  }\n  algorithms: string[] = ['FCFS', 'SJF', 'SRTF', 'PS', 'RR'];\n  processItems: ProcessItem[] = [];\n  isPriorityUsed: boolean = false;\n\n  constructor(\n    private processCalculationService: ProcessCalculationService,\n    private timeBlockProviderService: TimeBlockProviderService,\n    private processSchedulingProviderService: ProcessSchedulingProviderService) { }\n\n  ngOnInit(): void {\n  }\n\n  onAddProcessItem(): void {\n    const processItem = new ProcessItem();\n    processItem.Name = this.generateNextName();\n\n    this.processItems.push(processItem);\n  }\n\n  onDeleteProcessItem(processItem: ProcessItem): void {\n    const index = this.processItems.indexOf(processItem);\n    if (index !== -1) {\n      this.processItems.splice(index, 1);\n    }\n\n    this.processItems.forEach((item, i) => {\n      item.Name = 'P' + (i + 1).toString();\n    });\n  }\n\n  generateNextName(): string {\n    return 'P' + (this.processItems.length + 1).toString();\n  }\n\n  onClickStart(): void {\n    let timeBlocks: ProcessTimeBlock[] = [];\n    switch (this.internalSelectedAlgorithm) {\n      case 'FCFS':\n        timeBlocks = this.processCalculationService.calculateByFCFS(this.processItems);\n        break;\n      case 'SJF':\n        timeBlocks = this.processCalculationService.calculateBySJF(this.processItems);\n        break;\n      case 'SRTF':\n        timeBlocks = this.processCalculationService.calculateBySRTF(this.processItems);\n        break;\n      case 'PS':\n        timeBlocks = this.processCalculationService.calculateByPS(this.processItems);\n        break;\n      case 'RR':\n        break;\n      default:\n        break;\n    }\n\n    this.timeBlockProviderService.emit(timeBlocks);\n    const schedulingItems = this.processCalculationService.calculateSchedulingResult(timeBlocks, this.processItems);\n    this.processSchedulingProviderService.emit(schedulingItems);\n  }\n}\n","<div class=\"row\">\n    <div class=\"col-3\">\n        <div *ngFor=\"let algorithm of algorithms\">\n            <input type=\"radio\" name=\"algorithm\" [value]=\"algorithm\" [(ngModel)]=\"selectedAlgorithm\"> {{algorithm}}\n        </div>\n    </div>\n    <div class=\"col-9\">\n        <table class=\"table-bordered\">\n            <thead>\n                <tr>\n                    <th class=\"delete-button-cell\"></th>\n                    <th class=\"process-name-cell\">Process</th>\n                    <th class=\"process-arrival-cell\">Arrival time</th>\n                    <th class=\"process-burst-cell\">Burst time</th>\n                    <th class=\"process-priority-cell\">Priority</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr *ngFor=\"let processItem of processItems\">\n                    <td>\n                        <button class=\"delete-button-cell\" (click)=\"onDeleteProcessItem(processItem)\">X</button>\n                    </td>\n                    <td>\n                        <input class=\"process-name-cell\" type=\"text\" [(ngModel)]=\"processItem.Name\" disabled>\n                    </td>\n                    <td>\n                        <input class=\"process-arrival-cell\" type=\"number\" [(ngModel)]=\"processItem.ArrivalTime\">\n                    </td>\n                    <td>\n                        <input class=\"process-burst-cell\" type=\"number\" [(ngModel)]=\"processItem.BurstTime\">\n                    </td>\n                    <td>\n                        <input class=\"process-priority-cell\" type=\"number\" [(ngModel)]=\"processItem.Priority\" [disabled]=\"!isPriorityUsed\">\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n        <div>\n            <button (click)=\"onAddProcessItem()\">+</button>\n        </div>\n    </div>\n    <div>\n        <button (click)=\"onClickStart()\">Start</button>\n    </div>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ProcessSchedulingItem } from '../models/process-scheduling-item';\nimport { ProcessSchedulingProviderService } from '../services/process-scheduling-provider-service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-process-scheduling-result',\n  templateUrl: './process-scheduling-result.component.html',\n  styleUrls: ['./process-scheduling-result.component.css']\n})\nexport class ProcessSchedulingResultComponent implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n  public processSchedulingItems: ProcessSchedulingItem[] = [];\n\n  constructor(private processSchedulingProviderService: ProcessSchedulingProviderService) { }\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  ngOnInit(): void {\n    const subscription = this.processSchedulingProviderService.processSchedulingItemsCalculated\n      .subscribe(schedulingItems => {\n        this.processSchedulingItems = schedulingItems;\n      });\n    this.subscriptions.push(subscription);\n  }\n\n}\n","<table class=\"table-bordered\" *ngIf=\"processSchedulingItems.length !== 0\">\n    <thead>\n        <tr>\n            <th class=\"process-name-cell\">Process</th>\n            <th class=\"process-waiting-cell\">Waiting time</th>\n            <th class=\"process-response-cell\">Response time</th>\n            <th class=\"process-turnaround-cell\">Turnaround time</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let processSchedulingItem of processSchedulingItems\">\n            <td>\n                <label class=\"process-name-cell\">{{processSchedulingItem.Name}}</label>   \n            </td>\n            <td>\n                <label class=\"process-waiting-cell\">{{processSchedulingItem.WaitingTime}}</label>  \n            </td>\n            <td>\n                <label class=\"process-response-cell\">{{processSchedulingItem.ResponseTime}}</label>  \n            </td>\n            <td>\n                <label class=\"process-turnaround-cell\">{{processSchedulingItem.TurnaroundTime}}</label>  \n            </td>\n        </tr>\n    </tbody>\n</table>","import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport { ProcessTimeBlock } from '../models/process-time-block';\n\n@Component({\n  selector: 'app-process-time-block',\n  templateUrl: './process-time-block.component.html',\n  styleUrls: ['./process-time-block.component.css']\n})\nexport class ProcessTimeBlockComponent implements OnInit {\n  @Input() processTimeBlock: ProcessTimeBlock;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div [style.width.px]=\"processTimeBlock.Duration * 20\" class=\"process-time-block\">\n    \n    <div class=\"process-name-text\">{{processTimeBlock.Name}}</div>\n    <div>\n        <div class=\"start-time-text\" *ngIf=\"processTimeBlock.IsFirstBlock\">\n            {{processTimeBlock.StartTime}}\n        </div>\n        <div class=\"end-time-text\">\n            {{processTimeBlock.EndTime}}\n        </div>\n    </div>\n</div>","import { Injectable } from '@angular/core';\r\nimport { ProcessItem } from '../models/process-item';\r\nimport { ProcessTimeBlock } from '../models/process-time-block';\r\nimport { cloneDeep, min, findLast } from 'lodash';\r\nimport { ProcessSchedulingItem } from '../models/process-scheduling-item';\r\n\r\n@Injectable()\r\nexport class ProcessCalculationService {\r\n    public calculateByFCFS(processes: ProcessItem[]): ProcessTimeBlock[] {\r\n        const timeBlocks: ProcessTimeBlock[] = [];\r\n        const copiedProcesses = cloneDeep(processes);\r\n        copiedProcesses.sort(x => x.ArrivalTime);\r\n\r\n        let startTime = 0;\r\n        let endTime = 0;\r\n        for (const process of copiedProcesses) {\r\n            startTime = endTime;\r\n            endTime = endTime + process.BurstTime;\r\n            timeBlocks.push(new ProcessTimeBlock(process.Name, startTime, endTime));\r\n        }\r\n\r\n        return timeBlocks;\r\n    }\r\n\r\n    public calculateBySJF(processes: ProcessItem[]): ProcessTimeBlock[] {\r\n        const timeBlocks: ProcessTimeBlock[] = [];\r\n        const copiedProcesses = cloneDeep(processes);\r\n\r\n        let startTime = 0;\r\n        let endTime = 0;\r\n        while (copiedProcesses.length !== 0) {\r\n            let availableProcesses = this.filterAvailableProcesses(copiedProcesses, endTime);\r\n            let minBurstTime = min(availableProcesses.map(x => x.BurstTime));\r\n\r\n            // Take the first process with min burst time\r\n            let process = copiedProcesses.find(x => x.BurstTime === minBurstTime);\r\n\r\n            startTime = endTime;\r\n            endTime = endTime + process.BurstTime;\r\n\r\n            timeBlocks.push(new ProcessTimeBlock(process.Name, startTime, endTime));\r\n            this.removeProcessItemFromCollection(process, copiedProcesses);\r\n        }\r\n\r\n        return timeBlocks;\r\n    }\r\n\r\n    public calculateBySRTF(processes: ProcessItem[]): ProcessTimeBlock[] {\r\n        const timeBlocks: ProcessTimeBlock[] = [];\r\n        const copiedProcesses = cloneDeep(processes);\r\n\r\n        let startTime = 0;\r\n        let endTime = 0;\r\n        let currentProcess: ProcessItem = null;\r\n        while (copiedProcesses.length !== 0) {\r\n            let availableProcesses = this.filterAvailableProcesses(copiedProcesses, endTime);\r\n            let minRemainingTime = min(availableProcesses.map(x => x.BurstTime));\r\n\r\n            let minRemainingTimeProcess = copiedProcesses.find(x => x.BurstTime === minRemainingTime);\r\n            if (currentProcess === null) {\r\n                // First run\r\n                currentProcess = minRemainingTimeProcess;\r\n            } else if (currentProcess === minRemainingTimeProcess) {\r\n                // Not pre-empted yet\r\n                endTime += 1;\r\n                currentProcess.BurstTime -= 1;\r\n            } else {\r\n                // A shorter process was found, current process is about to be pre-empted\r\n                timeBlocks.push(new ProcessTimeBlock(currentProcess.Name, startTime, endTime));\r\n                currentProcess = minRemainingTimeProcess;\r\n                startTime = endTime;\r\n            }\r\n\r\n            if (currentProcess.BurstTime === 0) {\r\n                this.removeProcessItemFromCollection(currentProcess, copiedProcesses);\r\n            }\r\n\r\n            if (copiedProcesses.length === 0) {\r\n                // The last process has finished running\r\n                // But it was not captured by timeBlocks.push above\r\n                // Because it was the only process left so currentProcess === minRemainingTimeProcess\r\n                // So its run will be captured here\r\n                timeBlocks.push(new ProcessTimeBlock(currentProcess.Name, startTime, endTime));\r\n            }\r\n        }\r\n\r\n        return timeBlocks;\r\n    }\r\n\r\n    public calculateByPS(processes: ProcessItem[]): ProcessTimeBlock[] {\r\n        const timeBlocks: ProcessTimeBlock[] = [];\r\n        const copiedProcesses = cloneDeep(processes);\r\n\r\n        let startTime = 0;\r\n        let endTime = 0;\r\n        while (copiedProcesses.length !== 0) {\r\n            let availableProcesses = this.filterAvailableProcesses(copiedProcesses, endTime);\r\n            // 1 highest - n lowest\r\n            let highestPriority = min(availableProcesses.map(x => x.Priority));\r\n\r\n            let process = copiedProcesses.find(x => x.Priority === highestPriority);\r\n\r\n            startTime = endTime;\r\n            endTime = endTime + process.BurstTime;\r\n\r\n            timeBlocks.push(new ProcessTimeBlock(process.Name, startTime, endTime));\r\n            this.removeProcessItemFromCollection(process, copiedProcesses);\r\n        }\r\n\r\n        return timeBlocks;\r\n    }\r\n\r\n    public calculateByRR(processItems: ProcessItem[]): ProcessTimeBlock[] {\r\n        return [];\r\n    }\r\n\r\n    public calculateSchedulingResult(timeBlocks: ProcessTimeBlock[], processes: ProcessItem[]): ProcessSchedulingItem[] {\r\n        let schedulingItems: ProcessSchedulingItem[] = [];\r\n\r\n        for (let process of processes) {\r\n            // These find methods assume that timeblocks are already sorted by start time ASC\r\n            // i.e what it looks like in GUI\r\n            let waitingTime = this.calculateWaitingTime(timeBlocks, process);\r\n            let responseTime = this.calculateResponseTime(timeBlocks, process);\r\n            let turnaroundTime = this.calculateTurnaroundTime(timeBlocks, process);\r\n\r\n            let schedulingItem = new ProcessSchedulingItem(process.Name, waitingTime, responseTime, turnaroundTime);\r\n            schedulingItems.push(schedulingItem);\r\n        }\r\n\r\n        return schedulingItems;\r\n    }\r\n\r\n    private calculateWaitingTime(timeBlocks: ProcessTimeBlock[], process: ProcessItem): number {\r\n        let turnaroundTime = this.calculateTurnaroundTime(timeBlocks, process);\r\n        return turnaroundTime - process.BurstTime;\r\n    }\r\n\r\n    private calculateResponseTime(timeBlocks: ProcessTimeBlock[], process: ProcessItem): number {\r\n        let timeBlock = timeBlocks.find(x => x.Name === process.Name);\r\n        return timeBlock.StartTime - process.ArrivalTime;\r\n    }\r\n\r\n    private calculateTurnaroundTime(timeBlocks: ProcessTimeBlock[], process: ProcessItem): number {\r\n        let timeBlock = findLast(timeBlocks, x => x.Name === process.Name);\r\n        return timeBlock.EndTime - process.ArrivalTime;\r\n    }\r\n\r\n    private removeProcessItemFromCollection(item: ProcessItem, collection: ProcessItem[]): void {\r\n        const index = collection.indexOf(item);\r\n        if (index !== -1) {\r\n            collection.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    // Can't use .filter() because it returns new array with new reference\r\n    private filterAvailableProcesses(processes: ProcessItem[], endTime: number): ProcessItem[]{\r\n        let availableProcesses  = [];\r\n        for (let i = 0; i < processes.length; i++) {\r\n            if (processes[i].ArrivalTime <= endTime) {\r\n                availableProcesses.push(processes[i]);\r\n            }\r\n        }\r\n\r\n        return availableProcesses;\r\n    }\r\n}","import { ProcessSchedulingItem } from '../models/process-scheduling-item';\r\nimport { Subject } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class ProcessSchedulingProviderService {\r\n    private processSchedulingItemsSource = new Subject<ProcessSchedulingItem[]>();\r\n    public processSchedulingItemsCalculated = this.processSchedulingItemsSource.asObservable();\r\n\r\n    public emit(processSchedulingItems: ProcessSchedulingItem[]): void {\r\n        this.processSchedulingItemsSource.next(processSchedulingItems);\r\n    }\r\n}","import { ProcessTimeBlock } from '../models/process-time-block';\r\nimport { Subject } from 'rxjs';\r\n\r\nexport class TimeBlockProviderService {\r\n    private timeBlocksSource = new Subject<ProcessTimeBlock[]>();\r\n    public timeBlocksCalculated = this.timeBlocksSource.asObservable();\r\n\r\n    public emit(processTimeBlocks: ProcessTimeBlock[]): void {\r\n        this.timeBlocksSource.next(processTimeBlocks);\r\n    }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}