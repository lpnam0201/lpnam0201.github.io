{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/models/process-item.ts","webpack:///src/app/models/process-scheduling-item.ts","webpack:///src/app/models/process-time-block.ts","webpack:///src/app/process-chart/process-chart.component.ts","webpack:///src/app/process-chart/process-chart.component.html","webpack:///src/app/process-input/process-input.component.ts","webpack:///src/app/process-input/process-input.component.html","webpack:///src/app/process-scheduling-result/process-scheduling-result.component.ts","webpack:///src/app/process-scheduling-result/process-scheduling-result.component.html","webpack:///src/app/process-time-block/process-time-block.component.ts","webpack:///src/app/process-time-block/process-time-block.component.html","webpack:///src/app/services/process-calculation-service.ts","webpack:///src/app/services/process-scheduling-provider-service.ts","webpack:///src/app/services/time-block-provider-service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","providers","AppModule","declarations","bootstrap","ProcessItem","ProcessSchedulingItem","Name","WaitingTime","ResponseTime","TurnaroundTime","ProcessTimeBlock","StartTime","EndTime","Duration","IsFirstBlock","ProcessChartComponent","timeBlockProviderService","subscriptions","processTimeBlocks","pixelPerSecond","forEach","sub","unsubscribe","subscription","timeBlocksCalculated","subscribe","timeBlocks","push","ProcessInputComponent","processCalculationService","processSchedulingProviderService","algorithms","processItems","isPriorityUsed","isRoundRobin","processItem","generateNextName","index","indexOf","splice","item","i","toString","length","internalSelectedAlgorithm","calculateByFCFS","calculateBySJF","calculateBySRTF","calculateByPS","calculateByRR","quantum","emit","schedulingItems","calculateSchedulingResult","value","onAddProcessItem","onClickStart","ProcessSchedulingResultComponent","processSchedulingItems","processSchedulingItemsCalculated","propertySelctor","average","map","reduce","previous","current","toFixed","findAverage","x","ProcessTimeBlockComponent","processTimeBlock","ProcessCalculationService","processes","copiedProcesses","ArrivalTime","startTime","endTime","process","BurstTime","availableProcesses","filterAvailableProcesses","nextProcess","findProcessWithMinArrivalTime","minBurstTime","find","removeProcessItemFromCollection","currentProcess","minRemainingTime","minRemainingTimeProcess","highestPriority","Priority","waitingTime","calculateWaitingTime","responseTime","calculateResponseTime","turnaroundTime","calculateTurnaroundTime","schedulingItem","timeBlock","collection","minArrivalTime","ProcessSchedulingProviderService","processSchedulingItemsSource","asObservable","next","TimeBlockProviderService","timeBlocksSource","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { TimeBlockProviderService } from './services/time-block-provider-service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [TimeBlockProviderService]\n})\nexport class AppComponent {\n  title = 'process-scheduling';\n}\n","<div class=\"container\">\n  <app-process-input></app-process-input>\n  <app-process-chart></app-process-chart>\n  <app-process-scheduling-result></app-process-scheduling-result>\n  <router-outlet></router-outlet>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ProcessChartComponent } from './process-chart/process-chart.component';\nimport { ProcessInputComponent } from './process-input/process-input.component';\nimport { ProcessTimeBlockComponent } from './process-time-block/process-time-block.component';\nimport { ProcessCalculationService } from './services/process-calculation-service';\nimport { TimeBlockProviderService } from './services/time-block-provider-service';\nimport { ProcessSchedulingResultComponent } from './process-scheduling-result/process-scheduling-result.component';\nimport { ProcessSchedulingProviderService } from './services/process-scheduling-provider-service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ProcessChartComponent,\n    ProcessInputComponent,\n    ProcessTimeBlockComponent,\n    ProcessSchedulingResultComponent\n  ],\n  imports: [\n    FormsModule,\n    BrowserModule,\n    AppRoutingModule\n  ],\n  providers: [\n    ProcessCalculationService,\n    TimeBlockProviderService,\n    ProcessSchedulingProviderService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export class ProcessItem {\r\n    public Name: string;\r\n    public ArrivalTime: number;\r\n    public BurstTime: number;\r\n    public Priority: number;\r\n}","export class ProcessSchedulingItem {\r\n    constructor(\r\n        public Name: string,\r\n        public WaitingTime: number,\r\n        public ResponseTime: number,\r\n        public TurnaroundTime: number) { }\r\n}","export class ProcessTimeBlock {\r\n    constructor(\r\n        public Name: string,\r\n        public StartTime: number,\r\n        public EndTime: number) {}\r\n\r\n    public Duration: number = this.EndTime - this.StartTime;\r\n    public IsFirstBlock: boolean = this.StartTime === 0;\r\n}","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { TimeBlockProviderService } from '../services/time-block-provider-service';\nimport { ProcessTimeBlock } from '../models/process-time-block';\nimport { Subscription } from 'rxjs';\nimport { min } from 'lodash';\n\n@Component({\n  selector: 'app-process-chart',\n  templateUrl: './process-chart.component.html',\n  styleUrls: ['./process-chart.component.css']\n})\nexport class ProcessChartComponent implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n  public processTimeBlocks: ProcessTimeBlock[] = [];\n  public pixelPerSecond: number = 10;\n\n  constructor(private timeBlockProviderService: TimeBlockProviderService) { }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  ngOnInit(): void {\n    const subscription = this.timeBlockProviderService.timeBlocksCalculated\n      .subscribe(timeBlocks => {\n        this.processTimeBlocks = timeBlocks;\n      });\n    this.subscriptions.push(subscription);\n  }\n\n}\n","<div *ngIf=\"processTimeBlocks.length !== 0\">\n    <div class=\"scroll-container\">\n        <div>\n            <label>Pixel per second</label>\n            <input type=\"number\" [(ngModel)]=\"pixelPerSecond\">\n        </div>\n        <app-process-time-block \n                *ngFor=\"let processTimeBlock of processTimeBlocks\" \n                [processTimeBlock]=\"processTimeBlock\"\n                [pixelPerSecond]=\"pixelPerSecond\">\n        </app-process-time-block>\n    </div>\n    <div>Copy this Gantt chart</div>\n    <div class=\"scroll-container\">\n        <table>\n            <thead>\n                <tr>\n                    <th *ngFor=\"let processTimeBlock of processTimeBlocks\" [style.width.px]=\"processTimeBlock.Duration * pixelPerSecond\">\n                        <div>{{processTimeBlock.Name}}</div>\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td *ngFor=\"let processTimeBlock of processTimeBlocks\" [style.width.px]=\"processTimeBlock.Duration * pixelPerSecond\">\n                        <div>\n                            <div class=\"start-time-text\" *ngIf=\"processTimeBlock.IsFirstBlock\">\n                                {{processTimeBlock.StartTime}}\n                            </div>\n                            <div class=\"end-time-text\">\n                                {{processTimeBlock.EndTime}}\n                            </div>\n                        </div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ProcessItem } from '../models/process-item';\nimport { ProcessCalculationService } from '../services/process-calculation-service';\nimport { TimeBlockProviderService } from '../services/time-block-provider-service';\nimport { ProcessTimeBlock } from '../models/process-time-block';\nimport { ProcessSchedulingProviderService } from '../services/process-scheduling-provider-service';\n\n@Component({\n  selector: 'app-process-input',\n  templateUrl: './process-input.component.html',\n  styleUrls: ['./process-input.component.css']\n})\nexport class ProcessInputComponent implements OnInit {\n  private internalSelectedAlgorithm: string;\n  public get selectedAlgorithm(): string {\n    return this.internalSelectedAlgorithm;\n  }\n  public set selectedAlgorithm(value: string) {\n    if (value === 'PS') {\n      this.isPriorityUsed = true;\n    } else {\n      this.isPriorityUsed = false;\n    }\n\n    if (value === 'RR') {\n      this.isRoundRobin = true;\n    } else {\n      this.isRoundRobin = false;\n      this.quantum = null;\n    }\n\n    this.internalSelectedAlgorithm = value;\n  }\n  algorithms: string[] = ['FCFS', 'SJF', 'SRTF', 'PS', 'RR'];\n  processItems: ProcessItem[] = [];\n  isPriorityUsed: boolean = false;\n  isRoundRobin: boolean = false;\n  quantum: number;\n\n  constructor(\n    private processCalculationService: ProcessCalculationService,\n    private timeBlockProviderService: TimeBlockProviderService,\n    private processSchedulingProviderService: ProcessSchedulingProviderService) { }\n\n  ngOnInit(): void {\n  }\n\n  onAddProcessItem(): void {\n    const processItem = new ProcessItem();\n    processItem.Name = this.generateNextName();\n\n    this.processItems.push(processItem);\n  }\n\n  onDeleteProcessItem(processItem: ProcessItem): void {\n    const index = this.processItems.indexOf(processItem);\n    if (index !== -1) {\n      this.processItems.splice(index, 1);\n    }\n\n    this.processItems.forEach((item, i) => {\n      item.Name = 'P' + (i + 1).toString();\n    });\n  }\n\n  generateNextName(): string {\n    return 'P' + (this.processItems.length + 1).toString();\n  }\n\n  onClickStart(): void {\n    let timeBlocks: ProcessTimeBlock[] = [];\n    switch (this.internalSelectedAlgorithm) {\n      case 'FCFS':\n        timeBlocks = this.processCalculationService.calculateByFCFS(this.processItems);\n        break;\n      case 'SJF':\n        timeBlocks = this.processCalculationService.calculateBySJF(this.processItems);\n        break;\n      case 'SRTF':\n        timeBlocks = this.processCalculationService.calculateBySRTF(this.processItems);\n        break;\n      case 'PS':\n        timeBlocks = this.processCalculationService.calculateByPS(this.processItems);\n        break;\n      case 'RR':\n        timeBlocks = this.processCalculationService.calculateByRR(this.processItems, this.quantum);\n        break;\n      default:\n        break;\n    }\n\n    this.timeBlockProviderService.emit(timeBlocks);\n    const schedulingItems = this.processCalculationService.calculateSchedulingResult(timeBlocks, this.processItems);\n    this.processSchedulingProviderService.emit(schedulingItems);\n  }\n}\n","<div class=\"row\">\n    <div class=\"col-3\">\n        <div *ngFor=\"let algorithm of algorithms\">\n            <input type=\"radio\" name=\"algorithm\" [value]=\"algorithm\" [(ngModel)]=\"selectedAlgorithm\" [disabled]=\"algorithm === 'RR'\"> {{algorithm}}\n        </div>\n        <div *ngIf=\"isRoundRobin\">\n            <label>Quantum</label>\n            <input type=\"number\" [(ngModel)]=\"quantum\">\n        </div>\n    </div>\n    <div class=\"col-9\">\n        <table class=\"table-bordered\">\n            <thead>\n                <tr>\n                    <th class=\"delete-button-cell\">\n                        <button (click)=\"onAddProcessItem()\">+</button>\n                    </th>\n                    <th class=\"process-name-cell\">Process</th>\n                    <th class=\"process-arrival-cell\">Arrival time</th>\n                    <th class=\"process-burst-cell\">Burst time</th>\n                    <th class=\"process-priority-cell\">Priority</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr *ngFor=\"let processItem of processItems\">\n                    <td>\n                        <button class=\"delete-button-cell\" (click)=\"onDeleteProcessItem(processItem)\">X</button>\n                    </td>\n                    <td>\n                        <input class=\"process-name-cell\" type=\"text\" [(ngModel)]=\"processItem.Name\" disabled>\n                    </td>\n                    <td>\n                        <input class=\"process-arrival-cell\" type=\"number\" [(ngModel)]=\"processItem.ArrivalTime\">\n                    </td>\n                    <td>\n                        <input class=\"process-burst-cell\" type=\"number\" [(ngModel)]=\"processItem.BurstTime\">\n                    </td>\n                    <td>\n                        <input class=\"process-priority-cell\" type=\"number\" [(ngModel)]=\"processItem.Priority\" [disabled]=\"!isPriorityUsed\">\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <div>\n        <button (click)=\"onClickStart()\">Start</button>\n    </div>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ProcessSchedulingItem } from '../models/process-scheduling-item';\nimport { ProcessSchedulingProviderService } from '../services/process-scheduling-provider-service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-process-scheduling-result',\n  templateUrl: './process-scheduling-result.component.html',\n  styleUrls: ['./process-scheduling-result.component.css']\n})\nexport class ProcessSchedulingResultComponent implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n  public processSchedulingItems: ProcessSchedulingItem[] = [];\n  public get averageWaitingTime(): string {\n    return this.findAverage(x => x.WaitingTime);\n  }\n  public get averageResponseTime(): string {\n    return this.findAverage(x => x.ResponseTime);\n  }\n  public get averageTurnaroundTime(): string {\n    return this.findAverage(x => x.TurnaroundTime);\n  }\n\n  constructor(private processSchedulingProviderService: ProcessSchedulingProviderService) { }\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  ngOnInit(): void {\n    const subscription = this.processSchedulingProviderService.processSchedulingItemsCalculated\n      .subscribe(schedulingItems => {\n        this.processSchedulingItems = schedulingItems;\n      });\n    this.subscriptions.push(subscription);\n  }\n\n  private findAverage(propertySelctor: (value: ProcessSchedulingItem) => number): string {\n    let average = this.processSchedulingItems\n      .map(propertySelctor)\n      .reduce((previous, current) => previous + current)\n      / this.processSchedulingItems.length;\n\n    return average.toFixed(2);\n  }\n}\n","<div  *ngIf=\"processSchedulingItems.length !== 0\">\n    <div>Copy this result table</div>\n    <table>\n        <thead>\n            <tr>\n                <th class=\"process-name-cell\">Process</th>\n                <th class=\"process-waiting-cell\">Waiting time</th>\n                <th class=\"process-response-cell\">Response time</th>\n                <th class=\"process-turnaround-cell\">Turnaround time</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let processSchedulingItem of processSchedulingItems\">\n                <td>\n                    <label class=\"process-name-cell\">{{processSchedulingItem.Name}}</label>   \n                </td>\n                <td>\n                    <label class=\"process-waiting-cell\">{{processSchedulingItem.WaitingTime}}</label>  \n                </td>\n                <td>\n                    <label class=\"process-response-cell\">{{processSchedulingItem.ResponseTime}}</label>  \n                </td>\n                <td>\n                    <label class=\"process-turnaround-cell\">{{processSchedulingItem.TurnaroundTime}}</label>  \n                </td>\n            </tr>\n            <tr>\n                <td>AVG</td>\n                <td>{{averageWaitingTime}}</td>\n                <td>{{averageResponseTime}}</td>\n                <td>{{averageTurnaroundTime}}</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n","import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport { ProcessTimeBlock } from '../models/process-time-block';\n\n@Component({\n  selector: 'app-process-time-block',\n  templateUrl: './process-time-block.component.html',\n  styleUrls: ['./process-time-block.component.css']\n})\nexport class ProcessTimeBlockComponent implements OnInit {\n  @Input() processTimeBlock: ProcessTimeBlock;\n  @Input() pixelPerSecond: number;\n  get width(): number {\n    return this.processTimeBlock.Duration  * this.pixelPerSecond;\n  }\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div [style.width.px]=\"width\" class=\"process-time-block\">\n    <div class=\"process-name-text\">{{processTimeBlock.Name}}</div>\n    <div>\n        <div class=\"start-time-text\" *ngIf=\"processTimeBlock.IsFirstBlock\">\n            {{processTimeBlock.StartTime}}\n        </div>\n        <div class=\"end-time-text\">\n            {{processTimeBlock.EndTime}}\n        </div>\n    </div>\n</div>\n\n","import { Injectable } from '@angular/core';\r\nimport { ProcessItem } from '../models/process-item';\r\nimport { ProcessTimeBlock } from '../models/process-time-block';\r\nimport { cloneDeep, min, findLast, orderBy, sortBy } from 'lodash';\r\nimport { ProcessSchedulingItem } from '../models/process-scheduling-item';\r\n\r\n@Injectable()\r\nexport class ProcessCalculationService {\r\n    public calculateByFCFS(processes: ProcessItem[]): ProcessTimeBlock[] {\r\n        const timeBlocks: ProcessTimeBlock[] = [];\r\n        let copiedProcesses = cloneDeep(processes);\r\n        copiedProcesses = sortBy(copiedProcesses, x => x.ArrivalTime);\r\n\r\n        let startTime = 0;\r\n        let endTime = 0;\r\n        for (const process of copiedProcesses) {\r\n            if (process.ArrivalTime > endTime) {\r\n                startTime = endTime;\r\n                endTime = process.ArrivalTime;\r\n                timeBlocks.push(new ProcessTimeBlock('-', startTime, process.ArrivalTime));\r\n            }\r\n\r\n            startTime = endTime;\r\n            endTime = startTime + process.BurstTime;\r\n            timeBlocks.push(new ProcessTimeBlock(process.Name, startTime, endTime));\r\n        }\r\n\r\n        return timeBlocks;\r\n    }\r\n\r\n    public calculateBySJF(processes: ProcessItem[]): ProcessTimeBlock[] {\r\n        const timeBlocks: ProcessTimeBlock[] = [];\r\n        const copiedProcesses = cloneDeep(processes);\r\n\r\n        let startTime = 0;\r\n        let endTime = 0;\r\n        while (copiedProcesses.length !== 0) {\r\n            let availableProcesses = this.filterAvailableProcesses(copiedProcesses, endTime);\r\n            if (availableProcesses.length === 0)\r\n            {\r\n                let nextProcess = this.findProcessWithMinArrivalTime(copiedProcesses);\r\n                startTime = endTime;\r\n                endTime = nextProcess.ArrivalTime;\r\n                timeBlocks.push(new ProcessTimeBlock('-', startTime, endTime));\r\n                availableProcesses = this.filterAvailableProcesses(copiedProcesses, endTime);\r\n            }\r\n\r\n            let minBurstTime = min(availableProcesses.map(x => x.BurstTime));\r\n\r\n            // Take the first process with min burst time\r\n            let process = availableProcesses.find(x => x.BurstTime === minBurstTime);\r\n\r\n            startTime = endTime;\r\n            endTime = startTime + process.BurstTime;\r\n\r\n            timeBlocks.push(new ProcessTimeBlock(process.Name, startTime, endTime));\r\n            this.removeProcessItemFromCollection(process, copiedProcesses);\r\n        }\r\n\r\n        return timeBlocks;\r\n    }\r\n\r\n    public calculateBySRTF(processes: ProcessItem[]): ProcessTimeBlock[] {\r\n        const timeBlocks: ProcessTimeBlock[] = [];\r\n        const copiedProcesses = cloneDeep(processes);\r\n\r\n        let startTime = 0;\r\n        let endTime = 0;\r\n        let currentProcess: ProcessItem = null;\r\n        while (copiedProcesses.length !== 0) {\r\n            let availableProcesses = this.filterAvailableProcesses(copiedProcesses, endTime);\r\n            if (availableProcesses.length === 0)\r\n            {\r\n                let nextProcess = this.findProcessWithMinArrivalTime(copiedProcesses);\r\n                startTime = endTime;\r\n                endTime = nextProcess.ArrivalTime;\r\n                timeBlocks.push(new ProcessTimeBlock('-', startTime, endTime));\r\n                availableProcesses = this.filterAvailableProcesses(copiedProcesses, endTime);\r\n            }\r\n\r\n            let minRemainingTime = min(availableProcesses.map(x => x.BurstTime));\r\n\r\n            let minRemainingTimeProcess = availableProcesses.find(x => x.BurstTime === minRemainingTime);\r\n            if (currentProcess === null) {\r\n                currentProcess = minRemainingTimeProcess;\r\n            } else if (currentProcess === minRemainingTimeProcess) {\r\n                // Not pre-empted yet\r\n                endTime += 1;\r\n                currentProcess.BurstTime -= 1;\r\n            } else {\r\n                // A shorter process was found, current process is about to be pre-empted\r\n                timeBlocks.push(new ProcessTimeBlock(currentProcess.Name, startTime, endTime));\r\n                currentProcess = minRemainingTimeProcess;\r\n                startTime = endTime;\r\n            }\r\n\r\n            if (currentProcess.BurstTime === 0) {\r\n                timeBlocks.push(new ProcessTimeBlock(currentProcess.Name, startTime, endTime));\r\n                this.removeProcessItemFromCollection(currentProcess, copiedProcesses);\r\n                currentProcess = null;\r\n                startTime = endTime;\r\n            }\r\n        }\r\n\r\n        return timeBlocks;\r\n    }\r\n\r\n    public calculateByPS(processes: ProcessItem[]): ProcessTimeBlock[] {\r\n        const timeBlocks: ProcessTimeBlock[] = [];\r\n        const copiedProcesses = cloneDeep(processes);\r\n\r\n        let startTime = 0;\r\n        let endTime = 0;\r\n        while (copiedProcesses.length !== 0) {\r\n            let availableProcesses = this.filterAvailableProcesses(copiedProcesses, endTime);\r\n            if (availableProcesses.length === 0)\r\n            {\r\n                let nextProcess = this.findProcessWithMinArrivalTime(copiedProcesses);\r\n                startTime = endTime;\r\n                endTime = nextProcess.ArrivalTime;\r\n                timeBlocks.push(new ProcessTimeBlock('-', startTime, endTime));\r\n                availableProcesses = this.filterAvailableProcesses(copiedProcesses, endTime);\r\n            }\r\n\r\n            // 1 highest - n lowest\r\n            let highestPriority = min(availableProcesses.map(x => x.Priority));\r\n\r\n            let process = copiedProcesses.find(x => x.Priority === highestPriority);\r\n\r\n            startTime = endTime;\r\n            endTime = endTime + process.BurstTime;\r\n\r\n            timeBlocks.push(new ProcessTimeBlock(process.Name, startTime, endTime));\r\n            this.removeProcessItemFromCollection(process, copiedProcesses);\r\n        }\r\n\r\n        return timeBlocks;\r\n    }\r\n\r\n    public calculateByRR(processes: ProcessItem[], quantum: number): ProcessTimeBlock[] {\r\n        const timeBlocks: ProcessTimeBlock[] = [];\r\n        // const copiedProcesses = cloneDeep(processes);\r\n        // const processQueue = [];\r\n\r\n        // let firstProcess = sortBy(copiedProcesses, x => x.ArrivalTime)[0];\r\n        // processQueue.push(firstProcess);\r\n        // this.removeProcessItemFromCollection(firstProcess, copiedProcesses);\r\n\r\n        // let startTime = 0;\r\n        // let endTime = 0;\r\n        // let currentProcess: ProcessItem = firstProcess;\r\n        // while (copiedProcesses.length !== 0)\r\n        // {\r\n        //     // At the moment when a new process comes but the current process runs out of time and not yet finishes\r\n        //     // This new process will be enqueued before putting current process to the back of the queue\r\n        //     let availableProcesses = this.filterAvailableProcesses(copiedProcesses, endTime);\r\n        //     if (availableProcesses.length === 0)\r\n        //     {\r\n        //         let nextProcess = this.findProcessWithMinArrivalTime(copiedProcesses);\r\n        //         startTime = endTime;\r\n        //         endTime = nextProcess.ArrivalTime;\r\n        //         timeBlocks.push(new ProcessTimeBlock('-', startTime, endTime));\r\n        //         availableProcesses = this.filterAvailableProcesses(copiedProcesses, endTime);\r\n        //     }\r\n\r\n        //     currentProcess.BurstTime -= 1;\r\n        //     endTime += 1;\r\n\r\n        //     for (let process of availableProcesses) {\r\n        //         processQueue.push(process);\r\n        //         this.removeProcessItemFromCollection(process, copiedProcesses);\r\n        //     }\r\n\r\n        //     if (currentProcess.BurstTime === 0) {\r\n        //         timeBlocks.push(new ProcessTimeBlock(currentProcess.Name, startTime, endTime));\r\n        //         startTime = endTime;\r\n        //         processQueue.shift();\r\n\r\n        //         if (processQueue.length > 0) {\r\n        //             currentProcess = processQueue[0];\r\n        //         }\r\n        //     } else {\r\n        //         let duration = endTime - startTime;\r\n        //         if (duration === quantum) {\r\n        //             timeBlocks.push(new ProcessTimeBlock(currentProcess.Name, startTime, endTime));\r\n        //             startTime = endTime;\r\n\r\n                    \r\n\r\n        //             // Move to the back of queue\r\n        //             let outOfTimeProcess = processQueue.shift();\r\n        //             processQueue.push(outOfTimeProcess);\r\n        //             currentProcess = processQueue[0];\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n        return timeBlocks;\r\n    }\r\n\r\n    public calculateSchedulingResult(timeBlocks: ProcessTimeBlock[], processes: ProcessItem[]): ProcessSchedulingItem[] {\r\n        let schedulingItems: ProcessSchedulingItem[] = [];\r\n\r\n        for (let process of processes) {\r\n            // These find methods assume that timeblocks are already sorted by start time ASC\r\n            // i.e what it looks like in GUI\r\n            let waitingTime = this.calculateWaitingTime(timeBlocks, process);\r\n            let responseTime = this.calculateResponseTime(timeBlocks, process);\r\n            let turnaroundTime = this.calculateTurnaroundTime(timeBlocks, process);\r\n\r\n            let schedulingItem = new ProcessSchedulingItem(process.Name, waitingTime, responseTime, turnaroundTime);\r\n            schedulingItems.push(schedulingItem);\r\n        }\r\n\r\n        return schedulingItems;\r\n    }\r\n\r\n    private calculateWaitingTime(timeBlocks: ProcessTimeBlock[], process: ProcessItem): number {\r\n        let turnaroundTime = this.calculateTurnaroundTime(timeBlocks, process);\r\n        return turnaroundTime - process.BurstTime;\r\n    }\r\n\r\n    private calculateResponseTime(timeBlocks: ProcessTimeBlock[], process: ProcessItem): number {\r\n        let timeBlock = timeBlocks.find(x => x.Name === process.Name);\r\n        return timeBlock.StartTime - process.ArrivalTime;\r\n    }\r\n\r\n    private calculateTurnaroundTime(timeBlocks: ProcessTimeBlock[], process: ProcessItem): number {\r\n        let timeBlock = findLast(timeBlocks, x => x.Name === process.Name);\r\n        return timeBlock.EndTime - process.ArrivalTime;\r\n    }\r\n\r\n    private removeProcessItemFromCollection(item: ProcessItem, collection: ProcessItem[]): void {\r\n        const index = collection.indexOf(item);\r\n        if (index !== -1) {\r\n            collection.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    // Can't use .filter() because it returns new array with new reference\r\n    private filterAvailableProcesses(processes: ProcessItem[], endTime: number): ProcessItem[]{\r\n        let availableProcesses  = [];\r\n        for (let i = 0; i < processes.length; i++) {\r\n            if (processes[i].ArrivalTime <= endTime) {\r\n                availableProcesses.push(processes[i]);\r\n            }\r\n        }\r\n\r\n        return availableProcesses;\r\n    }\r\n\r\n    private findProcessWithMinArrivalTime(processes: ProcessItem[]): ProcessItem {\r\n        let minArrivalTime = min(processes.map(x => x.ArrivalTime));\r\n        return processes.find(x => x.ArrivalTime === minArrivalTime);\r\n    }\r\n}","import { ProcessSchedulingItem } from '../models/process-scheduling-item';\r\nimport { Subject } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class ProcessSchedulingProviderService {\r\n    private processSchedulingItemsSource = new Subject<ProcessSchedulingItem[]>();\r\n    public processSchedulingItemsCalculated = this.processSchedulingItemsSource.asObservable();\r\n\r\n    public emit(processSchedulingItems: ProcessSchedulingItem[]): void {\r\n        this.processSchedulingItemsSource.next(processSchedulingItems);\r\n    }\r\n}","import { ProcessTimeBlock } from '../models/process-time-block';\r\nimport { Subject } from 'rxjs';\r\n\r\nexport class TimeBlockProviderService {\r\n    private timeBlocksSource = new Subject<ProcessTimeBlock[]>();\r\n    public timeBlocksCalculated = this.timeBlocksSource.asObservable();\r\n\r\n    public emit(processTimeBlocks: ProcessTimeBlock[]): void {\r\n        this.timeBlocksSource.next(processTimeBlocks);\r\n    }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}