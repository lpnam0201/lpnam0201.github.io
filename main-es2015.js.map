{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/models/process-item.ts","./src/app/models/process-scheduling-item.ts","./src/app/models/process-time-block.ts","./src/app/process-chart/process-chart.component.ts","./src/app/process-chart/process-chart.component.html","./src/app/process-input/process-input.component.ts","./src/app/process-input/process-input.component.html","./src/app/process-scheduling-result/process-scheduling-result.component.ts","./src/app/process-scheduling-result/process-scheduling-result.component.html","./src/app/process-time-block/process-time-block.component.ts","./src/app/process-time-block/process-time-block.component.html","./src/app/services/process-calculation-service.ts","./src/app/services/process-scheduling-provider-service.ts","./src/app/services/time-block-provider-service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { TimeBlockProviderService } from './services/time-block-provider-service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [TimeBlockProviderService]\n})\nexport class AppComponent {\n  title = 'process-scheduling';\n}\n","<div class=\"container\">\n  <app-process-input></app-process-input>\n  <app-process-chart></app-process-chart>\n  <app-process-scheduling-result></app-process-scheduling-result>\n  <router-outlet></router-outlet>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ProcessChartComponent } from './process-chart/process-chart.component';\nimport { ProcessInputComponent } from './process-input/process-input.component';\nimport { ProcessTimeBlockComponent } from './process-time-block/process-time-block.component';\nimport { ProcessCalculationService } from './services/process-calculation-service';\nimport { TimeBlockProviderService } from './services/time-block-provider-service';\nimport { ProcessSchedulingResultComponent } from './process-scheduling-result/process-scheduling-result.component';\nimport { ProcessSchedulingProviderService } from './services/process-scheduling-provider-service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ProcessChartComponent,\n    ProcessInputComponent,\n    ProcessTimeBlockComponent,\n    ProcessSchedulingResultComponent\n  ],\n  imports: [\n    FormsModule,\n    BrowserModule,\n    AppRoutingModule\n  ],\n  providers: [\n    ProcessCalculationService,\n    TimeBlockProviderService,\n    ProcessSchedulingProviderService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export class ProcessItem {\r\n    public Name: string;\r\n    public ArrivalTime: number;\r\n    public BurstTime: number;\r\n    public Priority: number;\r\n}","export class ProcessSchedulingItem {\r\n    constructor(\r\n        public Name: string,\r\n        public WaitingTime: number,\r\n        public ResponseTime: number,\r\n        public TurnaroundTime: number) { }\r\n}","export class ProcessTimeBlock {\r\n    constructor(\r\n        public Name: string,\r\n        public StartTime: number,\r\n        public EndTime: number) {}\r\n\r\n    public Duration: number = this.EndTime - this.StartTime;\r\n    public IsFirstBlock: boolean = this.StartTime === 0;\r\n}","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { TimeBlockProviderService } from '../services/time-block-provider-service';\nimport { ProcessTimeBlock } from '../models/process-time-block';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-process-chart',\n  templateUrl: './process-chart.component.html',\n  styleUrls: ['./process-chart.component.css']\n})\nexport class ProcessChartComponent implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n  public processTimeBlocks: ProcessTimeBlock[] = [];\n\n  constructor(private timeBlockProviderService: TimeBlockProviderService) { }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  ngOnInit(): void {\n    const subscription = this.timeBlockProviderService.timeBlocksCalculated\n      .subscribe(timeBlocks => {\n        this.processTimeBlocks = timeBlocks;\n      });\n    this.subscriptions.push(subscription);\n  }\n\n}\n","<app-process-time-block *ngFor=\"let processTimeBlock of processTimeBlocks\" [processTimeBlock]=\"processTimeBlock\">\n</app-process-time-block>","import { Component, OnInit } from '@angular/core';\nimport { ProcessItem } from '../models/process-item';\nimport { ProcessCalculationService } from '../services/process-calculation-service';\nimport { TimeBlockProviderService } from '../services/time-block-provider-service';\nimport { ProcessTimeBlock } from '../models/process-time-block';\nimport { ProcessSchedulingProviderService } from '../services/process-scheduling-provider-service';\n\n@Component({\n  selector: 'app-process-input',\n  templateUrl: './process-input.component.html',\n  styleUrls: ['./process-input.component.css']\n})\nexport class ProcessInputComponent implements OnInit {\n  private internalSelectedAlgorithm: string;\n  public get selectedAlgorithm(): string {\n    return this.internalSelectedAlgorithm;\n  }\n  public set selectedAlgorithm(value: string) {\n    if (value === 'PS') {\n      this.isPriorityUsed = true;\n    } else {\n      this.isPriorityUsed = false;\n      this.processItems.forEach(x => {\n        x.Priority = null;\n      });\n    }\n    this.internalSelectedAlgorithm = value;\n  }\n  algorithms: string[] = ['FCFS', 'SJF', 'SRTF', 'PS', 'RR'];\n  processItems: ProcessItem[] = [];\n  isPriorityUsed: boolean = false;\n\n  constructor(\n    private processCalculationService: ProcessCalculationService,\n    private timeBlockProviderService: TimeBlockProviderService,\n    private processSchedulingProviderService: ProcessSchedulingProviderService) { }\n\n  ngOnInit(): void {\n  }\n\n  onAddProcessItem(): void {\n    const processItem = new ProcessItem();\n    processItem.Name = this.generateNextName();\n\n    this.processItems.push(processItem);\n  }\n\n  onDeleteProcessItem(processItem: ProcessItem): void {\n    const index = this.processItems.indexOf(processItem);\n    if (index !== -1) {\n      this.processItems.splice(index, 1);\n    }\n\n    this.processItems.forEach((item, i) => {\n      item.Name = 'P' + (i + 1).toString();\n    });\n  }\n\n  generateNextName(): string {\n    return 'P' + (this.processItems.length + 1).toString();\n  }\n\n  onClickStart(): void {\n    let timeBlocks: ProcessTimeBlock[] = [];\n    switch (this.internalSelectedAlgorithm) {\n      case 'FCFS':\n        timeBlocks = this.processCalculationService.calculateByFCFS(this.processItems);\n        break;\n      case 'SJF':\n        timeBlocks = this.processCalculationService.calculateBySJF(this.processItems);\n        break;\n      case 'SRTF':\n        timeBlocks = this.processCalculationService.calculateBySRTF(this.processItems);\n        break;\n      case 'PS':\n        timeBlocks = this.processCalculationService.calculateByPS(this.processItems);\n        break;\n      case 'RR':\n        break;\n      default:\n        break;\n    }\n\n    this.timeBlockProviderService.emit(timeBlocks);\n    const schedulingItems = this.processCalculationService.calculateSchedulingResult(timeBlocks, this.processItems);\n    this.processSchedulingProviderService.emit(schedulingItems);\n  }\n}\n","<div class=\"row\">\n    <div class=\"col-3\">\n        <div *ngFor=\"let algorithm of algorithms\">\n            <input type=\"radio\" name=\"algorithm\" [value]=\"algorithm\" [(ngModel)]=\"selectedAlgorithm\"> {{algorithm}}\n        </div>\n    </div>\n    <div class=\"col-9\">\n        <table class=\"table-bordered\">\n            <thead>\n                <tr>\n                    <th class=\"delete-button-cell\"></th>\n                    <th class=\"process-name-cell\">Process</th>\n                    <th class=\"process-arrival-cell\">Arrival time</th>\n                    <th class=\"process-burst-cell\">Burst time</th>\n                    <th class=\"process-priority-cell\">Priority</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr *ngFor=\"let processItem of processItems\">\n                    <td>\n                        <button class=\"delete-button-cell\" (click)=\"onDeleteProcessItem(processItem)\">X</button>\n                    </td>\n                    <td>\n                        <input class=\"process-name-cell\" type=\"text\" [(ngModel)]=\"processItem.Name\" disabled>\n                    </td>\n                    <td>\n                        <input class=\"process-arrival-cell\" type=\"number\" [(ngModel)]=\"processItem.ArrivalTime\">\n                    </td>\n                    <td>\n                        <input class=\"process-burst-cell\" type=\"number\" [(ngModel)]=\"processItem.BurstTime\">\n                    </td>\n                    <td>\n                        <input class=\"process-priority-cell\" type=\"number\" [(ngModel)]=\"processItem.Priority\" [disabled]=\"!isPriorityUsed\">\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n        <div>\n            <button (click)=\"onAddProcessItem()\">+</button>\n        </div>\n    </div>\n    <div>\n        <button (click)=\"onClickStart()\">Start</button>\n    </div>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ProcessSchedulingItem } from '../models/process-scheduling-item';\nimport { ProcessSchedulingProviderService } from '../services/process-scheduling-provider-service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-process-scheduling-result',\n  templateUrl: './process-scheduling-result.component.html',\n  styleUrls: ['./process-scheduling-result.component.css']\n})\nexport class ProcessSchedulingResultComponent implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n  public processSchedulingItems: ProcessSchedulingItem[] = [];\n\n  constructor(private processSchedulingProviderService: ProcessSchedulingProviderService) { }\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  ngOnInit(): void {\n    const subscription = this.processSchedulingProviderService.processSchedulingItemsCalculated\n      .subscribe(schedulingItems => {\n        this.processSchedulingItems = schedulingItems;\n      });\n    this.subscriptions.push(subscription);\n  }\n\n}\n","<table class=\"table-bordered\" *ngIf=\"processSchedulingItems.length !== 0\">\n    <thead>\n        <tr>\n            <th class=\"process-name-cell\">Process</th>\n            <th class=\"process-waiting-cell\">Waiting time</th>\n            <th class=\"process-response-cell\">Response time</th>\n            <th class=\"process-turnaround-cell\">Turnaround time</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let processSchedulingItem of processSchedulingItems\">\n            <td>\n                <label class=\"process-name-cell\">{{processSchedulingItem.Name}}</label>   \n            </td>\n            <td>\n                <label class=\"process-waiting-cell\">{{processSchedulingItem.WaitingTime}}</label>  \n            </td>\n            <td>\n                <label class=\"process-response-cell\">{{processSchedulingItem.ResponseTime}}</label>  \n            </td>\n            <td>\n                <label class=\"process-turnaround-cell\">{{processSchedulingItem.TurnaroundTime}}</label>  \n            </td>\n        </tr>\n    </tbody>\n</table>","import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport { ProcessTimeBlock } from '../models/process-time-block';\n\n@Component({\n  selector: 'app-process-time-block',\n  templateUrl: './process-time-block.component.html',\n  styleUrls: ['./process-time-block.component.css']\n})\nexport class ProcessTimeBlockComponent implements OnInit {\n  @Input() processTimeBlock: ProcessTimeBlock;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div [style.width.px]=\"processTimeBlock.Duration * 20\" class=\"process-time-block\">\n    \n    <div class=\"process-name-text\">{{processTimeBlock.Name}}</div>\n    <div>\n        <div class=\"start-time-text\" *ngIf=\"processTimeBlock.IsFirstBlock\">\n            {{processTimeBlock.StartTime}}\n        </div>\n        <div class=\"end-time-text\">\n            {{processTimeBlock.EndTime}}\n        </div>\n    </div>\n</div>","import { Injectable } from '@angular/core';\r\nimport { ProcessItem } from '../models/process-item';\r\nimport { ProcessTimeBlock } from '../models/process-time-block';\r\nimport { cloneDeep, min, findLast } from 'lodash';\r\nimport { ProcessSchedulingItem } from '../models/process-scheduling-item';\r\n\r\n@Injectable()\r\nexport class ProcessCalculationService {\r\n    public calculateByFCFS(processes: ProcessItem[]): ProcessTimeBlock[] {\r\n        const timeBlocks: ProcessTimeBlock[] = [];\r\n        const copiedProcesses = cloneDeep(processes);\r\n        copiedProcesses.sort(x => x.ArrivalTime);\r\n\r\n        let startTime = 0;\r\n        let endTime = 0;\r\n        for (const process of copiedProcesses) {\r\n            startTime = endTime;\r\n            endTime = endTime + process.BurstTime;\r\n            timeBlocks.push(new ProcessTimeBlock(process.Name, startTime, endTime));\r\n        }\r\n\r\n        return timeBlocks;\r\n    }\r\n\r\n    public calculateBySJF(processes: ProcessItem[]): ProcessTimeBlock[] {\r\n        const timeBlocks: ProcessTimeBlock[] = [];\r\n        const copiedProcesses = cloneDeep(processes);\r\n\r\n        let startTime = 0;\r\n        let endTime = 0;\r\n        while (copiedProcesses.length !== 0) {\r\n            let availableProcesses = this.filterAvailableProcesses(copiedProcesses, endTime);\r\n            let minBurstTime = min(availableProcesses.map(x => x.BurstTime));\r\n\r\n            // Take the first process with min burst time\r\n            let process = copiedProcesses.find(x => x.BurstTime === minBurstTime);\r\n\r\n            startTime = endTime;\r\n            endTime = endTime + process.BurstTime;\r\n\r\n            timeBlocks.push(new ProcessTimeBlock(process.Name, startTime, endTime));\r\n            this.removeProcessItemFromCollection(process, copiedProcesses);\r\n        }\r\n\r\n        return timeBlocks;\r\n    }\r\n\r\n    public calculateBySRTF(processes: ProcessItem[]): ProcessTimeBlock[] {\r\n        const timeBlocks: ProcessTimeBlock[] = [];\r\n        const copiedProcesses = cloneDeep(processes);\r\n\r\n        let startTime = 0;\r\n        let endTime = 0;\r\n        let currentProcess: ProcessItem = null;\r\n        while (copiedProcesses.length !== 0) {\r\n            let availableProcesses = this.filterAvailableProcesses(copiedProcesses, endTime);\r\n            let minRemainingTime = min(availableProcesses.map(x => x.BurstTime));\r\n\r\n            let minRemainingTimeProcess = copiedProcesses.find(x => x.BurstTime === minRemainingTime);\r\n            if (currentProcess === null) {\r\n                // First run\r\n                currentProcess = minRemainingTimeProcess;\r\n            } else if (currentProcess === minRemainingTimeProcess) {\r\n                // Not pre-empted yet\r\n                endTime += 1;\r\n                currentProcess.BurstTime -= 1;\r\n            } else {\r\n                // A shorter process was found, current process is about to be pre-empted\r\n                timeBlocks.push(new ProcessTimeBlock(currentProcess.Name, startTime, endTime));\r\n                currentProcess = minRemainingTimeProcess;\r\n                startTime = endTime;\r\n            }\r\n\r\n            if (currentProcess.BurstTime === 0) {\r\n                this.removeProcessItemFromCollection(currentProcess, copiedProcesses);\r\n            }\r\n\r\n            if (copiedProcesses.length === 0) {\r\n                // The last process has finished running\r\n                // But it was not captured by timeBlocks.push above\r\n                // Because it was the only process left so currentProcess === minRemainingTimeProcess\r\n                // So its run will be captured here\r\n                timeBlocks.push(new ProcessTimeBlock(currentProcess.Name, startTime, endTime));\r\n            }\r\n        }\r\n\r\n        return timeBlocks;\r\n    }\r\n\r\n    public calculateByPS(processes: ProcessItem[]): ProcessTimeBlock[] {\r\n        const timeBlocks: ProcessTimeBlock[] = [];\r\n        const copiedProcesses = cloneDeep(processes);\r\n\r\n        let startTime = 0;\r\n        let endTime = 0;\r\n        while (copiedProcesses.length !== 0) {\r\n            let availableProcesses = this.filterAvailableProcesses(copiedProcesses, endTime);\r\n            // 1 highest - n lowest\r\n            let highestPriority = min(availableProcesses.map(x => x.Priority));\r\n\r\n            let process = copiedProcesses.find(x => x.Priority === highestPriority);\r\n\r\n            startTime = endTime;\r\n            endTime = endTime + process.BurstTime;\r\n\r\n            timeBlocks.push(new ProcessTimeBlock(process.Name, startTime, endTime));\r\n            this.removeProcessItemFromCollection(process, copiedProcesses);\r\n        }\r\n\r\n        return timeBlocks;\r\n    }\r\n\r\n    public calculateByRR(processItems: ProcessItem[]): ProcessTimeBlock[] {\r\n        return [];\r\n    }\r\n\r\n    public calculateSchedulingResult(timeBlocks: ProcessTimeBlock[], processes: ProcessItem[]): ProcessSchedulingItem[] {\r\n        let schedulingItems: ProcessSchedulingItem[] = [];\r\n\r\n        for (let process of processes) {\r\n            // These find methods assume that timeblocks are already sorted by start time ASC\r\n            // i.e what it looks like in GUI\r\n            let waitingTime = this.calculateWaitingTime(timeBlocks, process);\r\n            let responseTime = this.calculateResponseTime(timeBlocks, process);\r\n            let turnaroundTime = this.calculateTurnaroundTime(timeBlocks, process);\r\n\r\n            let schedulingItem = new ProcessSchedulingItem(process.Name, waitingTime, responseTime, turnaroundTime);\r\n            schedulingItems.push(schedulingItem);\r\n        }\r\n\r\n        return schedulingItems;\r\n    }\r\n\r\n    private calculateWaitingTime(timeBlocks: ProcessTimeBlock[], process: ProcessItem): number {\r\n        let turnaroundTime = this.calculateTurnaroundTime(timeBlocks, process);\r\n        return turnaroundTime - process.BurstTime;\r\n    }\r\n\r\n    private calculateResponseTime(timeBlocks: ProcessTimeBlock[], process: ProcessItem): number {\r\n        let timeBlock = timeBlocks.find(x => x.Name === process.Name);\r\n        return timeBlock.StartTime - process.ArrivalTime;\r\n    }\r\n\r\n    private calculateTurnaroundTime(timeBlocks: ProcessTimeBlock[], process: ProcessItem): number {\r\n        let timeBlock = findLast(timeBlocks, x => x.Name === process.Name);\r\n        return timeBlock.EndTime - process.ArrivalTime;\r\n    }\r\n\r\n    private removeProcessItemFromCollection(item: ProcessItem, collection: ProcessItem[]): void {\r\n        const index = collection.indexOf(item);\r\n        if (index !== -1) {\r\n            collection.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    // Can't use .filter() because it returns new array with new reference\r\n    private filterAvailableProcesses(processes: ProcessItem[], endTime: number): ProcessItem[]{\r\n        let availableProcesses  = [];\r\n        for (let i = 0; i < processes.length; i++) {\r\n            if (processes[i].ArrivalTime <= endTime) {\r\n                availableProcesses.push(processes[i]);\r\n            }\r\n        }\r\n\r\n        return availableProcesses;\r\n    }\r\n}","import { ProcessSchedulingItem } from '../models/process-scheduling-item';\r\nimport { Subject } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class ProcessSchedulingProviderService {\r\n    private processSchedulingItemsSource = new Subject<ProcessSchedulingItem[]>();\r\n    public processSchedulingItemsCalculated = this.processSchedulingItemsSource.asObservable();\r\n\r\n    public emit(processSchedulingItems: ProcessSchedulingItem[]): void {\r\n        this.processSchedulingItemsSource.next(processSchedulingItems);\r\n    }\r\n}","import { ProcessTimeBlock } from '../models/process-time-block';\r\nimport { Subject } from 'rxjs';\r\n\r\nexport class TimeBlockProviderService {\r\n    private timeBlocksSource = new Subject<ProcessTimeBlock[]>();\r\n    public timeBlocksCalculated = this.timeBlocksSource.asObservable();\r\n\r\n    public emit(processTimeBlocks: ProcessTimeBlock[]): void {\r\n        this.timeBlocksSource.next(processTimeBlocks);\r\n    }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}